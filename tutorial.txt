usuário: t-334031
senha: G1JTXfK8

usuário: t-354645
senha: uX34UgPh

# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
-------------------------------------------------------------------------------
Lógica de programação
	- variáveis
	- operadores
	- algorítmo
	- estruturas de controle
	- POO
	- estruturas de dados

-------------------------------------------------------------------------------
GIT e GITHUB
Comandos Basicos do Git -->>
	git config --global user.name "Seu nome"
	git config --global user.email "seuemail@email.com"
	git clone url_do_repositório (clonar repositorio)
	git status (verificar o status do repositorio local)
	git add . (adiciona ao repositorio local)
	git commit -m "Tutorial"(documenta as alterações)
	git push (enviar ao repositorio GitHub)
	git pull (sincroniza as informações do repositorio)
------------------------------------------------------------------------------
Comandos Basicos do MS-Dos
	cls -> limpa a tela
	dir -> listar arquivos e diretorios
	cd nome_diretorio -> entra no diretorio
	cd .. -> voltar para ao diretorio anterior
-------------------------------------------------------------------------------

cls limpa o terminal do visual code.....

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

Boas Praticas da Programação:
1) - Cabeçalho de documentação -->> Comentario no codigo
2) - Nomes de arquivos, variaveis, funcoes, classes, etc...
	Regras(clean code)
	(Declarar nomes que tenham relaçao com seu codigo)
3) - 

Node.js Plataforma que permite execução do JavaScript

Comando Basicos Node:
	node -v (Mostra a versão)

Gerenciador de Pacotes:
	Site: npm
	npm -v (versão de pacotes)
	npm ls (lista pacotes instalados)
	npm init (iniciar um novo projeto JavaScript)
	npm i nome_do_pacote (instalar um novo pacote)
	npm r nome_do_pacote (remove pacotes)	


Variaveis e Constantes: 

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

Nas linguagem de programação as variaveis sao estaticas e dinamicas

Existem tres tipos de variaveis ->  String, number, boolean 

--------------------------------------------------------------------------------------
Comandos JavaScript:

	console.log() -> Escreve no console
	console.clear() -> Limpa  tela
	const -> Criar uma constante
	let -> criar uma variavel
	typeof() -> verifica o tipo de variavel
	\n -> Quebra linha

MANDAMENTO DA PROGRAMAÇÃO:
1) - Desenvolver sempre pensando na experiencia do usuario
2) - Usar o minimo de codigo (variaveis, operadores, estrutura de controles)
3) - Entender o Problema - 
Algoritmo ("receita de bolo")
variaveis -> entrada -> processamento -> saida
4) - 

Estruturas de Controle:
- condicionais
- laços de repetição

Estruturas de Controle Condicionais:
if (condição){
	// condição verdadeira
}

if (condição){
	// condição
}else{
	// condção falsa
}

Switch case (uso de variavel numerica (numero inteiro))
swithch (variavel){
	case 1:
		// codigo caso o valor da variavel seja 1
		break
	case 2:
		// codigo caso o valor da variavel seja 2
		break
	default:
		// opcional o codigo sera executado se nenhum caso for definido
		break
}

Observação:
- Uma condição nunca pode ser verdeira e falsa simultaneamente
- No uso do if-else sempre uma das condições sera processada

Operador AND (&&): 
Este operador retorna verdadeiro se ambos os operandos forem verdadeiros. 
Caso contrário, ele retorna falso. 
Por exemplo, se tivermos duas expressões, A e B, A && B será verdadeiro somente se ambas as expressões forem verdadeiras.
O operador AND é usado para realizar duas ou mais verificações simultâneas.
Se todas as verificações forem verdadeiras, o resultado será verdadeiro. Caso contrário, será falso.
Exemplo: if (idade >= 18 && possuiCarteiraDeMotorista === true) {}

Operador OR (||):
Este operador retorna verdadeiro se pelo menos um dos operandos for verdadeiro. 
Se ambos os operandos forem falsos, então o resultado será falso. 
Por exemplo, se tivermos duas expressões, A e B, A || B será verdadeiro se pelo menos uma das expressões for verdadeira.
O operador OR é usado para realizar uma escolha entre duas ou mais condições.
Se pelo menos uma das condições for verdadeira, o resultado será verdadeiro. Somente se todas as condições forem falsas, o resultado será falso.
Exemplo: if (tipo === “admin” || tipo === “superadmin”) {}

Operador NOT (!):
Este operador inverte o valor de um operando booleano. 
Se um operando for verdadeiro, o operador NOT o tornará falso e vice-versa. 
Por exemplo, se tivermos uma expressão A, !A será verdadeiro se A for falso.
O operador NOT é usado para inverter o valor booleano de uma expressão.
Se a expressão for verdadeira, o resultado será falso. Se a expressão for falsa, o resultado será verdadeiro.
Exemplo: if (!isLoggedIn) {}